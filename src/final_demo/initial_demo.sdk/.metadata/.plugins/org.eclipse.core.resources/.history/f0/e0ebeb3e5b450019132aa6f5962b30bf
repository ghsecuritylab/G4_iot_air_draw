/******************************************************************************
*
* Copyright (C) 2009 - 2017 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

//Standard library includes
#include <stdio.h>
#include <string.h>

//BSP includes for peripherals
#include "xparameters.h"
#include "netif/xadapter.h"

#include "platform.h"
#include "platform_config.h"
#if defined (__arm__) || defined(__aarch64__)
#include "xil_printf.h"
#endif
#include "xil_cache.h"

//LWIP include files
#include "lwip/ip_addr.h"
#include "lwip/tcp.h"
#include "lwip/err.h"
#include "lwip/tcp.h"
#include "lwip/inet.h"
#if LWIP_IPV6==1
#include "lwip/ip.h"
#else
#if LWIP_DHCP==1
#include "lwip/dhcp.h"
#endif
#endif

void lwip_init(); /* missing declaration in lwIP */

//TCP Network Params
#define SRC_MAC_ADDR {0x00, 0x0a, 0x35, 0x00, 0x01, 0x02}
#define SRC_IP4_ADDR "192.168.1.10"
#define IP4_NETMASK "255.255.255.0"
#define IP4_GATEWAY "192.168.1.1"
#define SRC_PORT 7

#define DEST_IP4_ADDR  "192.168.1.11"
#define DEST_IP6_ADDR "fe80::6600:6aff:fe71:fde6"
#define DEST_PORT 9090

#define TCP_SEND_BUFSIZE 20

//Function prototypes
#if LWIP_IPV6==1
void print_ip6(char *msg, ip_addr_t *ip);
#else
void print_ip(char *msg, ip_addr_t *ip);
void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw);
#endif
int setup_client_conn();
void tcp_fasttmr(void);
void tcp_slowtmr(void);

//Function prototypes for callbacks
static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err);
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err);
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len);
static void tcp_client_err(void *arg, err_t err);
static void tcp_client_close(struct tcp_pcb *pcb);
err_t tcp_send_data(char* message);

//DHCP global variables
#if LWIP_IPV6==0
#if LWIP_DHCP==1
extern volatile int dhcp_timoutcntr;
err_t dhcp_start(struct netif *netif);
#endif
#endif

//Networking global variables
extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;
static struct netif server_netif;
struct netif *app_netif;
static struct tcp_pcb *c_pcb;
char is_connected;

//video defines
#include "video_demo.h"
#include "video_capture/video_capture.h"
#include "display_ctrl/display_ctrl.h"
#include "intc/intc.h"
#include "xuartlite_l.h"
#include "math.h"
#include <ctype.h>
#include <stdlib.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "xparameters.h"
#include "vdma/vdma.h"
#include "xllfifo.h"
#include "input_from_mb_extended.h"
#include "sleep.h"
#include <stdio.h>
#include "xparameters.h"
#include "netif/xadapter.h"
#include "platform.h"
#include "platform_config.h"
#if defined (__arm__) || defined(__aarch64__)
#include "xil_printf.h"
#endif
#include "lwip/tcp.h"
#include "xil_cache.h"



/*
 * XPAR redefines
 */
#define DYNCLK_BASEADDR XPAR_AXI_DYNCLK_0_BASEADDR
#define VGA_VDMA_ID XPAR_AXIVDMA_0_DEVICE_ID
#define VGA_VDMA2_ID XPAR_AXIVDMA_1_DEVICE_ID
#define DISP_VTC_ID XPAR_VTC_0_DEVICE_ID
#define VID_VTC_ID XPAR_VTC_1_DEVICE_ID
#define VID_GPIO_ID XPAR_AXI_GPIO_VIDEO_DEVICE_ID
#define VID_VTC_IRPT_ID XPAR_INTC_0_VTC_1_VEC_ID
#define VID_GPIO_IRPT_ID XPAR_INTC_0_GPIO_0_VEC_ID
#define SCU_TIMER_ID XPAR_AXI_TIMER_0_DEVICE_ID
#define UART_BASEADDR XPAR_UARTLITE_0_BASEADDR
#define MB_BASE_ADDR XPAR_INPUT_FROM_MB_EXTEND_0_S00_AXI_BASEADDR
#define BT_BASEADDR 0x40610000


#define FIFO_DEV_ID	   	XPAR_AXI_FIFO_0_DEVICE_ID
XLlFifo Fifo0Instance;
/*
 * Display and Video Driver structs
 */
DisplayCtrl dispCtrl;
XAxiVdma vdma;
VideoCapture videoCapt;
INTC intc;
char fRefresh; //flag used to trigger a refresh of the Menu on video detect


//Additional vdma variables
XAxiVdma vdma2;
static XAxiVdma_DmaSetup vdma2Config_1; /*VDMA_1 read channel configuration*/
static XAxiVdma_DmaSetup vdma2Config_2; /*VDMA_1 write channel configuration*/
static XAxiVdma_FrameCounter frame_count_config_1;
static XAxiVdma_FrameCounter frame_count_config_2;


/*
 * Framebuffers for video data
 */
u8 frameBuf[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME];
u8 *pFrames[DISPLAY_NUM_FRAMES]; //array of pointers to the frame buffers

/*
 * Interrupt vector table
 */
const ivt_t ivt[] = {
	videoGpioIvt(VID_GPIO_IRPT_ID, &videoCapt),
	videoVtcIvt(VID_VTC_IRPT_ID, &(videoCapt.vtc))
};

void 	DemoInitialize();
void 	DemoRun();
int RxReceive (XLlFifo *InstancePtr, u32* DestinationAddr);
void DemoISR(void *callBackRef, void *pVideo);
void set_thresholds(int t1,int t2, int t3);

int ethernet_setup(){
	//Varibales for IP parameters
	#if LWIP_IPV6==0
		ip_addr_t ipaddr, netmask, gw;
	#endif

		//The mac address of the board. this should be unique per board
		unsigned char mac_ethernet_address[] = SRC_MAC_ADDR;

		//Network interface
		app_netif = &server_netif;

		//Initialize platform
//		init_platform();

		//Defualt IP parameter values
	#if LWIP_IPV6==0
	#if LWIP_DHCP==1
	    ipaddr.addr = 0;
		gw.addr = 0;
		netmask.addr = 0;
	#else
		(void)inet_aton(SRC_IP4_ADDR, &ipaddr);
		(void)inet_aton(IP4_NETMASK, &netmask);
		(void)inet_aton(IP4_GATEWAY, &gw);
	#endif
	#endif

		//LWIP initialization
		lwip_init();

		//Setup Network interface and add to netif_list
	#if (LWIP_IPV6 == 0)
		if (!xemac_add(app_netif, &ipaddr, &netmask,
							&gw, mac_ethernet_address,
							PLATFORM_EMAC_BASEADDR)) {
			xil_printf("Error adding N/W interface\n");
			return -1;
		}
	#else
		if (!xemac_add(app_netif, NULL, NULL, NULL, mac_ethernet_address,
							PLATFORM_EMAC_BASEADDR)) {
			xil_printf("Error adding N/W interface\n");
			return -1;
		}
		app_netif->ip6_autoconfig_enabled = 1;

		netif_create_ip6_linklocal_address(app_netif, 1);
		netif_ip6_addr_set_state(app_netif, 0, IP6_ADDR_VALID);

	#endif
		netif_set_default(app_netif);

		//Now enable interrupts
		platform_enable_interrupts();

		//Specify that the network is up
		netif_set_up(app_netif);

	#if (LWIP_IPV6 == 0)
	#if (LWIP_DHCP==1)
		/* Create a new DHCP client for this interface.
		 * Note: you must call dhcp_fine_tmr() and dhcp_coarse_tmr() at
		 * the predefined regular intervals after starting the client.
		 */
		dhcp_start(app_netif);
		dhcp_timoutcntr = 24;

		while(((app_netif->ip_addr.addr) == 0) && (dhcp_timoutcntr > 0))
			xemacif_input(app_netif);

		if (dhcp_timoutcntr <= 0) {
			if ((app_netif->ip_addr.addr) == 0) {
				xil_printf("DHCP Timeout\n");
				xil_printf("Configuring default IP of %s\n", SRC_IP4_ADDR);
				(void)inet_aton(SRC_IP4_ADDR, &(app_netif->ip_addr));
				(void)inet_aton(IP4_NETMASK, &(app_netif->netmask));
				(void)inet_aton(IP4_GATEWAY, &(app_netif->gw));
			}
		}

		ipaddr.addr = app_netif->ip_addr.addr;
		gw.addr = app_netif->gw.addr;
		netmask.addr = app_netif->netmask.addr;
	#endif
	#endif

		//Print connection settings
	#if (LWIP_IPV6 == 0)
		print_ip_settings(&ipaddr, &netmask, &gw);
	#else
		print_ip6("Board IPv6 address ", &app_netif->ip6_addr[0].u_addr.ip6);
	#endif


		//Setup connection
		setup_client_conn();

		return 0;
}
int main()
{
	Xil_ICacheEnable();
	Xil_DCacheEnable();
	DemoInitialize();

	ethernet_setup();


	char* user_byte;
	char new_color[10];
	new_color[0] = '\0';
	//Event loop
	while (1) {
		//Call tcp_tmr functions
		//Must be called regularly
		if (TcpFastTmrFlag) {
			tcp_fasttmr();
			TcpFastTmrFlag = 0;
		}
		if (TcpSlowTmrFlag) {
			tcp_slowtmr();
			TcpSlowTmrFlag = 0;
		}

		//Process data queued after interupt
		xemacif_input(app_netif);

		DemoRun();

		//check BT
		if(!XUartLite_IsReceiveEmpty(BT_BASEADDR)) {
			*user_byte = (u8)XUartLite_ReadReg(BT_BASEADDR, XUL_RX_FIFO_OFFSET);
			xil_printf("%c", *user_byte);
			strcat(new_color, user_byte);
			xil_printf("new_col = %s", new_color);

			//red
			if(strcmp(new_color,"red") == 0){
				xil_printf("Setting RED thresholds");
				set_thresholds(240,150, 1);
				new_color[0] = '\0';
			}
			//green
			else if(strcmp(new_color,"green") == 0){
				xil_printf("Setting GREEN thresholds");
				set_thresholds(240,150, 1);
				new_color[0] = '\0';

			}

		}




	}

	//Never reached
	cleanup_platform();

	return 0;
}

void DemoInitialize()
{
	int Status;
	XAxiVdma_Config *vdmaConfig;
	XAxiVdma_Config *vdma2Config;
	int i;

	/*
	 * Initialize an array of pointers to the 3 frame buffers
	 */
	for (i = 0; i < DISPLAY_NUM_FRAMES; i++)
	{
		pFrames[i] = frameBuf[i];
	}

	/*
	 * Initialize VDMA driver
	 */
	vdmaConfig = XAxiVdma_LookupConfig(VGA_VDMA_ID);
	if (!vdmaConfig)
	{
		xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA_ID);
		return;
	}
	Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
	if (Status != XST_SUCCESS)
	{
		xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
		return;
	}

	/*
	 * Initialize VDMA2 driver
	 */
	vdma2Config = XAxiVdma_LookupConfig(VGA_VDMA2_ID);
	if (!vdma2Config)
	{
		xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA2_ID);
		return;
	}
	Status = XAxiVdma_CfgInitialize(&vdma2, vdma2Config, vdma2Config->BaseAddress);
	if (Status != XST_SUCCESS)
	{
		xil_printf("VDMA2 Configuration Initialization failed %d\r\n", Status);
		return;
	}
	//configure objects for the vdma2
	read_config(&vdma2, &vdma2Config_1, &frame_count_config_1);
	write_config(&vdma2, &vdma2Config_2, &frame_count_config_2);


	/*
	 * Initialize the Display controller and start it
	 */
	Status = DisplayInitialize(&dispCtrl, &vdma, DISP_VTC_ID, DYNCLK_BASEADDR, pFrames, DEMO_STRIDE);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Display Ctrl initialization failed during demo initialization%d\r\n", Status);
		return;
	}
	Status = DisplayStart(&dispCtrl);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Couldn't start display during demo initialization%d\r\n", Status);
		return;
	}

	/*
	 * Initialize the Interrupt controller and start it.
	 */
	Status = fnInitInterruptController(&intc);
	if(Status != XST_SUCCESS) {
		xil_printf("Error initializing interrupts");
		return;
	}
	fnEnableInterrupts(&intc, &ivt[0], sizeof(ivt)/sizeof(ivt[0]));

	/*
	 * Initialize the Video Capture device
	 */
	Status = VideoInitialize(&videoCapt, &intc, &vdma, VID_GPIO_ID, VID_VTC_ID, VID_VTC_IRPT_ID, pFrames, DEMO_STRIDE, DEMO_START_ON_DET);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Video Ctrl initialization failed during demo initialization%d\r\n", Status);
		return;
	}

	/*
	 * Set the Video Detect callback to trigger the menu to reset, displaying the new detected resolution
	 */
	VideoSetCallback(&videoCapt, DemoISR, &fRefresh);

	/*
	 * Program thresholds and Enable IP
	 */

	set_thresholds(240,150, 1);

	INPUT_FROM_MB_EXTENDED_mWriteReg(MB_BASE_ADDR,INPUT_FROM_MB_EXTENDED_S00_AXI_SLV_REG3_OFFSET, 1280);
	INPUT_FROM_MB_EXTENDED_mWriteReg(MB_BASE_ADDR,INPUT_FROM_MB_EXTENDED_S00_AXI_SLV_REG4_OFFSET, 720);
	INPUT_FROM_MB_EXTENDED_mWriteReg(MB_BASE_ADDR,INPUT_FROM_MB_EXTENDED_S00_AXI_SLV_REG5_OFFSET, 1);
	INPUT_FROM_MB_EXTENDED_mWriteReg(MB_BASE_ADDR,INPUT_FROM_MB_EXTENDED_S00_AXI_SLV_REG5_OFFSET, 0);
	//LED_DETECT_mWriteReg(LED_DETECT_BASE_ADDR, LED_DETECT_S00_AXI_SLV_REG3_OFFSET, 220);//red
	//LED_DETECT_mWriteReg(LED_DETECT_BASE_ADDR, LED_DETECT_S00_AXI_SLV_REG4_OFFSET, 220);//green
	//LED_DETECT_mWriteReg(LED_DETECT_BASE_ADDR, LED_DETECT_S00_AXI_SLV_REG5_OFFSET, 100);//other




		/* Flush UART FIFO */
		while (!XUartLite_IsReceiveEmpty(UART_BASEADDR))
		{
			XUartLite_ReadReg(UART_BASEADDR, XUL_RX_FIFO_OFFSET);
		}

		/* ECE532 */
		xil_printf("\nStarting...\n");
		fRefresh = 0;

		videoCapt.state=VIDEO_STREAMING;
		VideoStart(&videoCapt);

		XLlFifo_Config *Config0;


		// Deal with fifo 0
		/* Initialize the Device Configuration Interface driver */
		Config0 = XLlFfio_LookupConfig(FIFO_DEV_ID);
		if (!Config0) {
			xil_printf("No config found for %d\r\n", FIFO_DEV_ID);
			return;
		}
		/*
		 * This is where the virtual address would be used, this example
		 * uses physical address.
		 */
		Status = XLlFifo_CfgInitialize(&Fifo0Instance, Config0, Config0->BaseAddress);
		if (Status != XST_SUCCESS) {
			xil_printf("Initialization failed\n\r");
			return;
		}
		// Deal with fifo 0
		/* Check for the Reset value */
		Status = XLlFifo_Status(&Fifo0Instance);
		XLlFifo_IntClear(&Fifo0Instance,0xffffffff);
		Status = XLlFifo_Status(&Fifo0Instance);
		if(Status != 0x0) {
			xil_printf("\n ERROR : Reset value of ISR0 : 0x%x\t"
					"Expected : 0x0\n\r",
					XLlFifo_Status(&Fifo0Instance));
			return;
		}
		int status;
		/*pipe input to output */
		DisplayChangeFrame(&dispCtrl, 1);
		status == DisplayStop(&dispCtrl);
		DisplaySetMode(&dispCtrl, &VMODE_1280x720);
		DisplayStart(&dispCtrl);

		xil_printf("\nStarting22...\n");

		/* check whether it worked */
		if (status == XST_DMA_ERROR)
			xil_printf("\n\rWARNING: AXI VDM A Error detected and cleared\n\r");



	return;
}


void DemoRun()
{

	int status;
		XGpio *GpioPtr = &videoCapt.gpio;
		int i,j;
	//loop and grab from vdmas
		//spin if not ready, plug HDMI-IN out and back in
		while (XUartLite_IsReceiveEmpty(UART_BASEADDR) && !fRefresh);

		XGpio_DiscreteRead(GpioPtr, 2);

		// if I uncomment this two lines out, weird things happen
		//INPUT_FROM_MB_EXTENDED_mWriteReg(MB_BASE_ADDR,INPUT_FROM_MB_EXTENDED_S00_AXI_SLV_REG5_OFFSET, 1);
		//INPUT_FROM_MB_EXTENDED_mWriteReg(MB_BASE_ADDR,INPUT_FROM_MB_EXTENDED_S00_AXI_SLV_REG5_OFFSET, 0);

		// enable the IP
		//control vdmas
		for (i = 0; i < 720; i++){ //720 = number of rows
			//read row into IP
			dma_read_from_memory(i,&vdma2,&vdma2Config_1,&frame_count_config_1,pFrames[0]);

			//sleep a little
			for(j=0; j<300; j++);

			//write row from IP to DDR
			while(dma_write_to_memory(i,&vdma2,&vdma2Config_2,&frame_count_config_2,pFrames[1]) == XST_FAILURE);
		}

		/* Revceive the Data Stream */
		u32 receive_int[2];
		RxReceive(&Fifo0Instance, receive_int);



	return;
}



int RxReceive (XLlFifo *InstancePtr, u32* DestinationAddr)
{

	int Status;
	static u32 ReceiveLength;
	/* Read Recieve Length */
	while(XLlFifo_RxOccupancy(InstancePtr)) {
		ReceiveLength = (XLlFifo_RxGetLen(InstancePtr));
//		xil_printf("receiving %d bytes into from rx\n\r", ReceiveLength);
		XLlFifo_Read(InstancePtr,DestinationAddr,ReceiveLength);
		//xil_printf("receive1 %d\r\n", DestinationAddr[0]);
		//xil_printf("receive2 %d\r\n", DestinationAddr[1]);
		//xil_printf("receive1 %d\r\n", (DestinationAddr[0] & 0x0000FFFF));

		// Black magic to get x and y

		int y = (DestinationAddr[0] & 0x0000FFFF);
		int x = ((DestinationAddr[0] & 0xFFFF0000) >> 16);

		// Black magic to check if led is detected
		if(y<0 || x == 65535){
			x = 0;
			y = 0;
		}
//		xil_printf("receive x %d\r\n", x);
//		xil_printf("receive y %d\r\n", y);
		char send_string[30];
		sprintf(send_string, "x:%4d,y:%3d", x,y);
		if(is_connected) 		tcp_send_data(send_string);

		/*
		xil_printf("edges: left %u, right %u, top %u, bottom %u\r\n"
				,((DestinationAddr[2] & 0xFFFF0000) >> 16)
				,(DestinationAddr[2] & 0x0000FFFF)
				,((DestinationAddr[1] & 0xFFFF0000) >> 16)
				,(DestinationAddr[1] & 0x0000FFFF));

		for (i=0; i < ReceiveLength /WORD_SIZE ; i++) {
				RxWord = XLlFifo_RxGetWord(InstancePtr);
				*(DestinationBuffer+i) = RxWord;
		}
		for (i=0; i < ReceiveLength;i++){
			xil_printf("i = %d: %x\n", i, (char)(((char*)DestinationBuffer)[i]));
		}
		*/
	}
	/*
	Status = XLlFifo_IsRxDone(InstancePtr);
	if(Status != TRUE){
		xil_printf("Failing in receive complete ... \r\n");
		return XST_FAILURE;
	}
	*/
	return XST_SUCCESS;
}

void set_thresholds(int t1,int t2, int t3){
	INPUT_FROM_MB_EXTENDED_mWriteReg(MB_BASE_ADDR,INPUT_FROM_MB_EXTENDED_S00_AXI_SLV_REG0_OFFSET, t1);
	INPUT_FROM_MB_EXTENDED_mWriteReg(MB_BASE_ADDR,INPUT_FROM_MB_EXTENDED_S00_AXI_SLV_REG1_OFFSET, t2);
	INPUT_FROM_MB_EXTENDED_mWriteReg(MB_BASE_ADDR,INPUT_FROM_MB_EXTENDED_S00_AXI_SLV_REG2_OFFSET, t3);
}
#if LWIP_IPV6==1
void print_ip6(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf(" %x:%x:%x:%x:%x:%x:%x:%x\n",
			IP6_ADDR_BLOCK1(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK2(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK3(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK4(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK5(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK6(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK7(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK8(&ip->u_addr.ip6));

}
#else
void print_ip(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf("%d.%d.%d.%d\n", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{

	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}
#endif


int setup_client_conn()
{
	struct tcp_pcb *pcb;
	err_t err;
	ip_addr_t remote_addr;

	xil_printf("Setting up client connection\n");

#if LWIP_IPV6==1
	remote_addr.type = IPADDR_TYPE_V6;
	err = inet6_aton(DEST_IP6_ADDR, &remote_addr);
#else
	err = inet_aton(DEST_IP4_ADDR, &remote_addr);
#endif

	if (!err) {
		xil_printf("Invalid Server IP address: %d\n", err);
		return -1;
	}

	//Create new TCP PCB structure
	pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n");
		return -1;
	}

	//Bind to specified @port
	err = tcp_bind(pcb, IP_ANY_TYPE, SRC_PORT);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n", SRC_PORT, err);
		return -2;
	}

	//Connect to remote server (with callback on connection established)
	err = tcp_connect(pcb, &remote_addr, DEST_PORT, tcp_client_connected);
	if (err) {
		xil_printf("Error on tcp_connect: %d\n", err);
		tcp_client_close(pcb);
		return -1;
	}

	is_connected = 0;

	xil_printf("Waiting for server to accept connection\n");

	return 0;
}

static void tcp_client_close(struct tcp_pcb *pcb)
{
	err_t err;

	xil_printf("Closing Client Connection\n");

	if (pcb != NULL) {
		tcp_sent(pcb, NULL);
		tcp_recv(pcb,NULL);
		tcp_err(pcb, NULL);
		err = tcp_close(pcb);
		if (err != ERR_OK) {
			/* Free memory with abort */
			tcp_abort(pcb);
		}
	}
}

static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
	if (err != ERR_OK) {
		tcp_client_close(tpcb);
		xil_printf("Connection error\n");
		return err;
	}

	xil_printf("Connection to server established\n");

	//Store state (for callbacks)
	c_pcb = tpcb;
	is_connected = 1;

	//Set callback values & functions
	tcp_arg(c_pcb, NULL);
	tcp_recv(c_pcb, tcp_client_recv);
	tcp_sent(c_pcb, tcp_client_sent);
	tcp_err(c_pcb, tcp_client_err);



	//ADD CODE HERE to do when connection established

//	//Just send a single packet
//	u8_t apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
//	char send_buf[TCP_SEND_BUFSIZE];
//	u32_t i;
//
//	for(i = 0; i < TCP_SEND_BUFSIZE-1; i = i + 1)
//	{
//		send_buf[i] = i+'a';
//	}
//	send_buf[TCP_SEND_BUFSIZE-1] = '\n';
//
//	//Loop until enough room in buffer (should be right away)
//	while (tcp_sndbuf(c_pcb) < TCP_SEND_BUFSIZE);
//
//	//Enqueue some data to send
//	err = tcp_write(c_pcb, send_buf, TCP_SEND_BUFSIZE, apiflags);
//	if (err != ERR_OK) {
//		xil_printf("TCP client: Error on tcp_write: %d\n", err);
//		return err;
//	}
//
//	//send the data packet
//	err = tcp_output(c_pcb);
//	if (err != ERR_OK) {
//		xil_printf("TCP client: Error on tcp_output: %d\n",err);
//		return err;
//	}
//
//	xil_printf("Packet data sent\n");
//
//	//END OF ADDED CODE



	return ERR_OK;
}

static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
	//If no data, connection closed
	if (!p) {
		xil_printf("No data received\n");
		tcp_client_close(tpcb);
		return ERR_OK;
	}



	//ADD CODE HERE to do on packet reception

	//Print message
	xil_printf("Packet received, %d bytes\n", p->tot_len);

	//Print packet contents to terminal
	char* packet_data = (char*) malloc(p->tot_len);
	pbuf_copy_partial(p, packet_data, p->tot_len, 0); //Note - inefficient way to access packet data
	u32_t i;

	for(i = 0; i < p->tot_len; i = i + 1)
		putchar(packet_data[i]);
	packet_data[i] = '\0';


	xil_printf("Packet data, %s\n", packet_data);
	//END OF ADDED CODE



	//Indicate done processing
	tcp_recved(tpcb, p->tot_len);

	//Free the received pbuf
	pbuf_free(p);

	return 0;
}

static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{


	//ADD CODE HERE to do on packet acknowledged

	//Print message
//	xil_printf("Packet sent successfully, %d bytes\n", len);

	//END OF ADDED CODE



	return 0;
}

static void tcp_client_err(void *arg, err_t err)
{
	LWIP_UNUSED_ARG(err);
	tcp_client_close(c_pcb);
	c_pcb = NULL;
	xil_printf("TCP connection aborted\n");
}

err_t tcp_send_data(char* message)
{
	err_t err;

	//Just send a single packet
	u8_t apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;

	//Loop until enough room in buffer (should be right away)
	while (tcp_sndbuf(c_pcb) < TCP_SEND_BUFSIZE);

	//Enqueue some data to send
	err = tcp_write(c_pcb, message, strlen(message), apiflags);
	if (err != ERR_OK) {
		xil_printf("TCP client: Error on tcp_write: %d\n", err);
		return err;
	}

	//send the data packet
	err = tcp_output(c_pcb);
	if (err != ERR_OK) {
		xil_printf("TCP client: Error on tcp_output: %d\n",err);
		return err;
	}

//	xil_printf("Packet data sent\n");

	return ERR_OK;
}

void DemoISR(void *callBackRef, void *pVideo)
{
	char *data = (char *) callBackRef;
	*data = 1; //set fRefresh to 1
}


